//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Cocktails = newCocktailsTable("public", "cocktails", "")

type cocktailsTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	Name         postgres.ColumnString
	Composition  postgres.ColumnString
	Availability postgres.ColumnBool
	Alcohol      postgres.ColumnBool
	Level        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CocktailsTable struct {
	cocktailsTable

	EXCLUDED cocktailsTable
}

// AS creates new CocktailsTable with assigned alias
func (a CocktailsTable) AS(alias string) *CocktailsTable {
	return newCocktailsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CocktailsTable with assigned schema name
func (a CocktailsTable) FromSchema(schemaName string) *CocktailsTable {
	return newCocktailsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CocktailsTable with assigned table prefix
func (a CocktailsTable) WithPrefix(prefix string) *CocktailsTable {
	return newCocktailsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CocktailsTable with assigned table suffix
func (a CocktailsTable) WithSuffix(suffix string) *CocktailsTable {
	return newCocktailsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCocktailsTable(schemaName, tableName, alias string) *CocktailsTable {
	return &CocktailsTable{
		cocktailsTable: newCocktailsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newCocktailsTableImpl("", "excluded", ""),
	}
}

func newCocktailsTableImpl(schemaName, tableName, alias string) cocktailsTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		NameColumn         = postgres.StringColumn("name")
		CompositionColumn  = postgres.StringColumn("composition")
		AvailabilityColumn = postgres.BoolColumn("availability")
		AlcoholColumn      = postgres.BoolColumn("alcohol")
		LevelColumn        = postgres.IntegerColumn("level")
		allColumns         = postgres.ColumnList{IDColumn, NameColumn, CompositionColumn, AvailabilityColumn, AlcoholColumn, LevelColumn}
		mutableColumns     = postgres.ColumnList{IDColumn, NameColumn, CompositionColumn, AvailabilityColumn, AlcoholColumn, LevelColumn}
	)

	return cocktailsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		Composition:  CompositionColumn,
		Availability: AvailabilityColumn,
		Alcohol:      AlcoholColumn,
		Level:        LevelColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
