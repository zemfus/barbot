//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Invitations = newInvitationsTable("public", "invitations", "")

type invitationsTable struct {
	postgres.Table

	// Columns
	Login postgres.ColumnString
	Name  postgres.ColumnString
	Level postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InvitationsTable struct {
	invitationsTable

	EXCLUDED invitationsTable
}

// AS creates new InvitationsTable with assigned alias
func (a InvitationsTable) AS(alias string) *InvitationsTable {
	return newInvitationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InvitationsTable with assigned schema name
func (a InvitationsTable) FromSchema(schemaName string) *InvitationsTable {
	return newInvitationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InvitationsTable with assigned table prefix
func (a InvitationsTable) WithPrefix(prefix string) *InvitationsTable {
	return newInvitationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InvitationsTable with assigned table suffix
func (a InvitationsTable) WithSuffix(suffix string) *InvitationsTable {
	return newInvitationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInvitationsTable(schemaName, tableName, alias string) *InvitationsTable {
	return &InvitationsTable{
		invitationsTable: newInvitationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newInvitationsTableImpl("", "excluded", ""),
	}
}

func newInvitationsTableImpl(schemaName, tableName, alias string) invitationsTable {
	var (
		LoginColumn    = postgres.StringColumn("login")
		NameColumn     = postgres.StringColumn("name")
		LevelColumn    = postgres.IntegerColumn("level")
		allColumns     = postgres.ColumnList{LoginColumn, NameColumn, LevelColumn}
		mutableColumns = postgres.ColumnList{LoginColumn, NameColumn, LevelColumn}
	)

	return invitationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Login: LoginColumn,
		Name:  NameColumn,
		Level: LevelColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
