//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Questions = newQuestionsTable("public", "questions", "")

type questionsTable struct {
	postgres.Table

	// Columns
	UserID     postgres.ColumnInteger
	QuestionID postgres.ColumnInteger
	Answer     postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type QuestionsTable struct {
	questionsTable

	EXCLUDED questionsTable
}

// AS creates new QuestionsTable with assigned alias
func (a QuestionsTable) AS(alias string) *QuestionsTable {
	return newQuestionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QuestionsTable with assigned schema name
func (a QuestionsTable) FromSchema(schemaName string) *QuestionsTable {
	return newQuestionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QuestionsTable with assigned table prefix
func (a QuestionsTable) WithPrefix(prefix string) *QuestionsTable {
	return newQuestionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QuestionsTable with assigned table suffix
func (a QuestionsTable) WithSuffix(suffix string) *QuestionsTable {
	return newQuestionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQuestionsTable(schemaName, tableName, alias string) *QuestionsTable {
	return &QuestionsTable{
		questionsTable: newQuestionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newQuestionsTableImpl("", "excluded", ""),
	}
}

func newQuestionsTableImpl(schemaName, tableName, alias string) questionsTable {
	var (
		UserIDColumn     = postgres.IntegerColumn("user_id")
		QuestionIDColumn = postgres.IntegerColumn("question_id")
		AnswerColumn     = postgres.BoolColumn("answer")
		allColumns       = postgres.ColumnList{UserIDColumn, QuestionIDColumn, AnswerColumn}
		mutableColumns   = postgres.ColumnList{UserIDColumn, QuestionIDColumn, AnswerColumn}
	)

	return questionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:     UserIDColumn,
		QuestionID: QuestionIDColumn,
		Answer:     AnswerColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
