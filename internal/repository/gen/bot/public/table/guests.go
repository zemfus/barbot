//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Guests = newGuestsTable("public", "guests", "")

type guestsTable struct {
	postgres.Table

	// Columns
	UserID        postgres.ColumnInteger
	Login         postgres.ColumnString
	Name          postgres.ColumnString
	State         postgres.ColumnInteger
	Level         postgres.ColumnInteger
	Participation postgres.ColumnBool
	CheckIn       postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type GuestsTable struct {
	guestsTable

	EXCLUDED guestsTable
}

// AS creates new GuestsTable with assigned alias
func (a GuestsTable) AS(alias string) *GuestsTable {
	return newGuestsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GuestsTable with assigned schema name
func (a GuestsTable) FromSchema(schemaName string) *GuestsTable {
	return newGuestsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GuestsTable with assigned table prefix
func (a GuestsTable) WithPrefix(prefix string) *GuestsTable {
	return newGuestsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GuestsTable with assigned table suffix
func (a GuestsTable) WithSuffix(suffix string) *GuestsTable {
	return newGuestsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGuestsTable(schemaName, tableName, alias string) *GuestsTable {
	return &GuestsTable{
		guestsTable: newGuestsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newGuestsTableImpl("", "excluded", ""),
	}
}

func newGuestsTableImpl(schemaName, tableName, alias string) guestsTable {
	var (
		UserIDColumn        = postgres.IntegerColumn("user_id")
		LoginColumn         = postgres.StringColumn("login")
		NameColumn          = postgres.StringColumn("name")
		StateColumn         = postgres.IntegerColumn("state")
		LevelColumn         = postgres.IntegerColumn("level")
		ParticipationColumn = postgres.BoolColumn("participation")
		CheckInColumn       = postgres.BoolColumn("check_in")
		allColumns          = postgres.ColumnList{UserIDColumn, LoginColumn, NameColumn, StateColumn, LevelColumn, ParticipationColumn, CheckInColumn}
		mutableColumns      = postgres.ColumnList{LoginColumn, NameColumn, StateColumn, LevelColumn, ParticipationColumn, CheckInColumn}
	)

	return guestsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:        UserIDColumn,
		Login:         LoginColumn,
		Name:          NameColumn,
		State:         StateColumn,
		Level:         LevelColumn,
		Participation: ParticipationColumn,
		CheckIn:       CheckInColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
