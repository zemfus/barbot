//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Answers = newAnswersTable("public", "answers", "")

type answersTable struct {
	postgres.Table

	// Columns
	UserID           postgres.ColumnInteger
	QuestionID       postgres.ColumnInteger
	UserIDRespondent postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AnswersTable struct {
	answersTable

	EXCLUDED answersTable
}

// AS creates new AnswersTable with assigned alias
func (a AnswersTable) AS(alias string) *AnswersTable {
	return newAnswersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AnswersTable with assigned schema name
func (a AnswersTable) FromSchema(schemaName string) *AnswersTable {
	return newAnswersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AnswersTable with assigned table prefix
func (a AnswersTable) WithPrefix(prefix string) *AnswersTable {
	return newAnswersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AnswersTable with assigned table suffix
func (a AnswersTable) WithSuffix(suffix string) *AnswersTable {
	return newAnswersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAnswersTable(schemaName, tableName, alias string) *AnswersTable {
	return &AnswersTable{
		answersTable: newAnswersTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newAnswersTableImpl("", "excluded", ""),
	}
}

func newAnswersTableImpl(schemaName, tableName, alias string) answersTable {
	var (
		UserIDColumn           = postgres.IntegerColumn("user_id")
		QuestionIDColumn       = postgres.IntegerColumn("question_id")
		UserIDRespondentColumn = postgres.IntegerColumn("user_id_respondent")
		allColumns             = postgres.ColumnList{UserIDColumn, QuestionIDColumn, UserIDRespondentColumn}
		mutableColumns         = postgres.ColumnList{UserIDColumn, QuestionIDColumn, UserIDRespondentColumn}
	)

	return answersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:           UserIDColumn,
		QuestionID:       QuestionIDColumn,
		UserIDRespondent: UserIDRespondentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
