package service

import (
	"barbot/internal/repository/gen/bot/public/model"
	"barbot/internal/repository/postgres"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.openly.dev/pointy"
	"strconv"
	"strings"
)

func (s *Service) handleGuest(update tgbotapi.Update) {
	if update.CallbackQuery != nil {
		if update.CallbackQuery.Data == "_" {
			return
		}
		s.bots.Bot.Send(tgbotapi.NewDeleteMessage(update.SentFrom().ID, update.CallbackQuery.Message.MessageID))

		if update.CallbackQuery.Data == "approveInvite_" {
			err := s.db.SetParticipation(update.SentFrom().ID, true)
			if err != nil {
				s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–¢—Ä–∞–±–ª—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–∏—è "+update.SentFrom().UserName))
				return
			}
			s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–ë—É–¥–µ–º –∂–¥–∞—Ç—å 22.06 –≤ 20:00, –º–µ—Å—Ç–æ –±—É–¥–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–æ –Ω–∞–∫–∞–Ω—É–Ω–µ"))
			s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "@"+update.SentFrom().UserName+" –∏–¥–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"))
			s.sendInfo(update.SentFrom().ID)
			permission := s.NewPermission(update.SentFrom().ID, true)
			s.bots.Bot.Send(permission)
		}

		if update.CallbackQuery.Data == "refuseInvite_" {
			err := s.db.SetParticipation(update.SentFrom().ID, true)
			if err != nil {
				s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–¢—Ä–∞–±–ª—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–∏—è "+update.SentFrom().UserName))
				return
			}
			s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–ñ–∞–ª—å( –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ"))
			s.sendInvite(update.SentFrom().ID)
			s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "@"+update.SentFrom().UserName+" –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"))
			permission := s.NewPermission(update.SentFrom().ID, false)
			s.bots.Bot.Send(permission)
		}

		if update.CallbackQuery.Data == "alcohol_" {
			s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–ù–∞–ø–∏—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –∞–ª–∫–æ–≥–æ–ª—é:"))
			s.db.SetState(update.SentFrom().ID, postgres.GuestAlcohol)
		}

		if update.CallbackQuery.Data == "music_" {
			s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–ù–∞–ø–∏—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –º—É–∑—ã–∫–µ:"))
			s.db.SetState(update.SentFrom().ID, postgres.GuestMusic)
		}

		if update.CallbackQuery.Data == "food_" {
			s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–ù–∞–ø–∏—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –µ–¥–µ:"))
			s.db.SetState(update.SentFrom().ID, postgres.GuestFood)
		}

		if update.CallbackQuery.Data == "invite_" {
			s.sendInvite(update.SentFrom().ID)
		}

		if update.CallbackQuery.Data == "return" {
			s.sendInfo(update.SentFrom().ID)
		}

		if strings.HasPrefix(update.CallbackQuery.Data, "cancel") {
			idx, _ := strconv.Atoi(update.CallbackQuery.Data[7:])
			_, err := s.db.SetGiftUserID(int32(idx), 0)
			if err != nil {
				s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–¢—Ä–∞–±–ª—ã —Å –æ—Ç–º–µ–Ω–æ–π –ø–æ–¥–∞—Ä–∫–∞ "+update.SentFrom().UserName))
				return
			}
			s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–ì–ê–õ–Ø –£ –ù–ê–° –û–¢–ú–ï–ù–ê"))
			s.sendWishlist(update.SentFrom().ID)
		}

		if strings.HasPrefix(update.CallbackQuery.Data, "add") {
			idx, _ := strconv.Atoi(update.CallbackQuery.Data[4:])
			ret, err := s.db.SetGiftUserID(int32(idx), update.SentFrom().ID)
			if err != nil {
				s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–¢—Ä–∞–±–ª—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–¥–∞—Ä–∫–∞ "+update.SentFrom().UserName))
				return
			}
			if !ret {
				s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–£–∂–µ –∫—Ç–æ—Ç–æ –≤–∑—è–ª("))
			} else {
				s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–¢–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º ‚úçÔ∏è"))
			}
			s.bots.Bot.Send(tgbotapi.NewDeleteMessage(update.SentFrom().ID, update.CallbackQuery.Message.MessageID))
			s.sendWishlist(update.SentFrom().ID)
		}

		if update.CallbackQuery.Data == "wishlist" {
			s.bots.Bot.Send(tgbotapi.NewDeleteMessage(update.SentFrom().ID, update.CallbackQuery.Message.MessageID))
			s.sendWishlist(update.SentFrom().ID)
		}

		data := strings.Fields(update.CallbackQuery.Data)
		idx, err := strconv.Atoi(data[0])
		if err == nil {
			err := s.db.NewOrder(update.SentFrom().ID, idx)
			if err != nil {
				s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–¢—Ä–∞–±–ª—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–∫—Ç–µ–π–ª—è –≤ –±–¥ "+update.SentFrom().UserName))
				return
			}
			if len(data) < 2 {
				s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º (–¥–ª–∏–Ω–∞ –∑–∞–∫–∞–∑–∞ –º–µ–Ω—å—à–µ 2) "+update.SentFrom().UserName))
				return
			}
			s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–ö–æ–∫—Ç–µ–π–ª—å \""+data[1]+"\" –≤ —Ä–∞–±–æ—Ç–µ"))
			msg := tgbotapi.NewMessage(s.BarmenID, data[1]+" "+strings.Join(data[2:], " "))
			inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ì–æ—Ç–æ–≤–æ", strconv.FormatInt(update.SentFrom().ID, 10))))
			msg.ReplyMarkup = inlineKeyboard
			s.bots.Bot.Send(msg)
			return
		}

		if update.CallbackQuery.Data == "cocktails" {
			guest, err := s.db.CheckGuest(update.SentFrom().UserName)

			if err != nil {
				s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–¢—Ä–∞–±–ª—ã —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –º–µ–Ω—é "+update.SentFrom().UserName))
				return
			}
			s.sendCocktails(update.SentFrom().ID, *guest.Level, true)
		}

		if update.CallbackQuery.Data == "soft drinks" {
			guest, err := s.db.CheckGuest(update.SentFrom().UserName)

			if err != nil {
				s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–¢—Ä–∞–±–ª—ã —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –º–µ–Ω—é "+update.SentFrom().UserName))
				return
			}
			s.sendCocktails(update.SentFrom().ID, *guest.Level, false)
		}

		return
	}

	if update.Message == nil {
		return
	}
	command := update.Message.Command()

	if command == "start" {
		guest, err := s.db.CheckGuest(update.SentFrom().UserName)

		if err != nil {
			s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–¢—Ä–∞–±–ª—ã —Å –∑–∞–ø—Ä–æ—Å–æ–º /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "+update.SentFrom().UserName))
			return
		}

		if guest.Name == nil {
			s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç "+update.SentFrom().UserName))
			s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–ü—Ä–æ–±–ª–µ–º–∫–∞, –Ω–∞–ø–∏—à–∏ @isuprun"))
			return
		}

		if pointy.PointerValue(guest.UserID, 0) != 0 {
			s.sendInfo(update.SentFrom().ID)
			return
		}

		s.db.SetID(update.SentFrom().UserName, update.SentFrom().ID)
		s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–ü—Ä–∏–≤–µ—Ç, "+*guest.Name))
		s.sendInvite(update.SentFrom().ID)
		return
	}

	if command == "menu" {
		s.sendCocktails(update.SentFrom().ID, 1, false)
	}

	state, err := s.db.GetState(update.SentFrom().ID)
	if err != nil {
		s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–ü—Ä–æ–±–ª–µ–º—ã —Å–æ get —Å—Ç—ç–π—Ç–æ–º —É "+update.SentFrom().UserName))
		return
	}

	if state == postgres.GuestAlcohol || state == postgres.GuestMusic || state == postgres.GuestFood {
		str := "@" + update.SentFrom().UserName + " —Ö–æ—á–µ—Ç"
		switch state {
		case postgres.GuestAlcohol:
			str += " Alcohol "
		case postgres.GuestMusic:
			str += " Music "
		case postgres.GuestFood:
			str += " Food "
		}
		err := s.db.SetState(update.SentFrom().ID, postgres.GuestNone)
		if err != nil {
			s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–ü—Ä–æ–±–ª–µ–º—ã —Å–æ set —Å—Ç—ç–π—Ç–æ–º —É "+update.SentFrom().UserName))
			return
		}
		str += update.Message.Text
		s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, str))
		s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–¢–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º ‚úçÔ∏è"))
		s.sendInfo(update.SentFrom().ID)
		return
	}

	s.bots.Bot.Send(tgbotapi.NewMessage(update.SentFrom().ID, "–Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å"))
}

func (s *Service) sendInvite(id int64) {
	msg := tgbotapi.NewMessage(id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ:")
	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "approveInvite_"),
			tgbotapi.NewInlineKeyboardButtonData("–ù–µ —Å–º–æ–≥—É(", "refuseInvite_"),
		),
	)
	msg.ReplyMarkup = inlineKeyboard
	s.bots.Bot.Send(msg)
}

func (s *Service) sendInfo(id int64) {
	msg := tgbotapi.NewMessage(id, "–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª–∏–±–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å:")
	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –∞–ª–∫–æ–≥–æ–ª—é", "alcohol_")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –º—É–∑—ã–∫–µ", "music_")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –µ–¥–µ", "food_")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Wishlist", "wishlist")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", "invite_")),
	)
	msg.ReplyMarkup = inlineKeyboard
	s.bots.Bot.Send(msg)
}

func (s *Service) sendWishlist(id int64) {
	gifts, err := s.db.GetWishlist()
	if err != nil {
		s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–û—à–∏–±–∫–∞"+err.Error()))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	str := "Wishlist:\n\n"

	for i := 1; i <= len(gifts); i++ {
		var button tgbotapi.InlineKeyboardButton
		switch pointy.PointerValue(gifts[i-1].UserID, 0) {
		case id:
			button = tgbotapi.NewInlineKeyboardButtonData(fmt.Sprint("‚úÖ", i, "‚úÖ"), fmt.Sprint("cancel ", i))
			str += "üü¢ "
		case 0:
			button = tgbotapi.NewInlineKeyboardButtonData(fmt.Sprint(i), fmt.Sprint("add ", i))
			str += "‚ö™Ô∏è "
		default:
			button = tgbotapi.NewInlineKeyboardButtonData(fmt.Sprint("‚ùå", i, "‚ùå"), "_")
			str += "üî¥ "
		}
		// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ —Å—Ç—Ä–æ–∫–∏
		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
		str += strconv.Itoa(int(pointy.PointerValue(gifts[i-1].ID, 0))) + ") "
		str += pointy.PointerValue(gifts[i-1].Description, "") + "\n"

		if i%5 == 1 {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
		} else {
			rows[len(rows)-1] = append(rows[len(rows)-1], button)
		}

	}
	str += "\nüü¢ -- –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ ‚úÖ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å)\n‚ö™Ô∏è -- –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞\nüî¥ -- –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã–µ"
	rows = append(rows,
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ", "return")))
	msg := tgbotapi.NewMessage(id, str)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg.DisableWebPagePreview = true
	s.bots.Bot.Send(msg)
}

func (s *Service) sendCocktails(id int64, level int32, alcohol bool) {
	FileID, err := s.db.GetMenu(alcohol)
	if err != nil {
		s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–∑–∞–ø—Ä–æ–æ—Å —Å –º–µ–Ω—é –∫–æ—Å—è—á–Ω—ã–π"+err.Error()))
		return
	}
	photo := tgbotapi.NewPhoto(id, tgbotapi.FileID(FileID))
	var col1, col2 []model.Cocktails
	tmp := 0
	if alcohol {
		tmp += 2
	}
	col1, err = s.db.GetCocktails(tmp)
	if err != nil {
		s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–∑–∞–ø—Ä–æ–æ—Å —Å –º–µ–Ω—é –∫–æ—Å—è—á–Ω—ã–π"+err.Error()))
		return
	}
	col2, err = s.db.GetCocktails(tmp + 1)
	if err != nil {
		s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–∑–∞–ø—Ä–æ–æ—Å —Å –º–µ–Ω—é –∫–æ—Å—è—á–Ω—ã–π"+err.Error()))
		return
	}
	var rows [][]tgbotapi.InlineKeyboardButton

	for i := 0; i < len(col1) || i < len(col2); i++ {
		var button1, button2 tgbotapi.InlineKeyboardButton
		if i < len(col1) {
			button1 = tgbotapi.NewInlineKeyboardButtonData(
				*col1[i].Name,
				fmt.Sprintln(col1[i].ID, "    ", *col1[i].Name, "—Å–æ—Å—Ç–∞–≤", *col1[i].Composition),
			)
		} else {
			button1 = tgbotapi.NewInlineKeyboardButtonData("_", "_")
		}
		if i < len(col2) {
			button2 = tgbotapi.NewInlineKeyboardButtonData(
				*col2[i].Name,
				fmt.Sprintln(col2[i].ID, "    ", *col2[i].Name, "—Å–æ—Å—Ç–∞–≤", *col2[i].Composition),
			)
		} else {
			button2 = tgbotapi.NewInlineKeyboardButtonData("_", "_")
		}

		rows = append(rows, tgbotapi.NewInlineKeyboardRow(button1, button2))
	}
	if level == 2 {
		col, err := s.db.GetCocktails(5)
		if err != nil {
			s.bots.Bot.Send(tgbotapi.NewMessage(s.AdminID, "–∑–∞–ø—Ä–æ–æ—Å —Å –º–µ–Ω—é –∫–æ—Å—è—á–Ω—ã–π"+err.Error()))
			return
		}
		for i := 0; i < len(col); i++ {
			button := tgbotapi.NewInlineKeyboardButtonData(
				*col[i].Name,
				fmt.Sprintln(col[i].ID, "    ", *col[i].Name, "—Å–æ—Å—Ç–∞–≤", *col[i].Composition),
			)
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
		}
	}
	if alcohol {
		button := tgbotapi.NewInlineKeyboardButtonData(
			"antivirus",
			fmt.Sprintln("5", "     antivirus", "—Å–æ—Å—Ç–∞–≤", "water / enterosgel"),
		)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
	}
	if level != 0 {
		name := "cocktails"
		if alcohol {
			name = "soft drinks"
		}
		button := tgbotapi.NewInlineKeyboardButtonData(
			name,
			name,
		)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
	}

	photo.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	s.bots.Bot.Send(photo)
}

func (s *Service) NewPermission(id int64, permission bool) tgbotapi.PromoteChatMemberConfig {
	return tgbotapi.PromoteChatMemberConfig{
		ChatMemberConfig: tgbotapi.ChatMemberConfig{
			ChatID:             s.ChatID,
			SuperGroupUsername: "approve",
			ChannelUsername:    "",
			UserID:             id,
		},
		IsAnonymous:         false,
		CanManageChat:       false,
		CanChangeInfo:       false,
		CanPostMessages:     permission,
		CanEditMessages:     false,
		CanDeleteMessages:   false,
		CanManageVoiceChats: permission,
		CanInviteUsers:      false,
		CanRestrictMembers:  false,
		CanPinMessages:      false,
		CanPromoteMembers:   false,
	}
}
